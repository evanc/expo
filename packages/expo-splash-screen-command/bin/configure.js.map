{"version":3,"file":"configure.js","sourceRoot":"","sources":["../src/configure.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport program from '@expo/commander';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { Mode, Platform } from './constants';\nimport configureAndroidSplashScreen from './configureAndroidSplashScreen';\nimport configureIosSplashScreen from './configureIosSplashScreen';\n\ntype Command = program.Command & {\n  mode: Mode;\n  platform: Platform;\n};\n\nasync function action(imagePath: string, command: Command) {\n  switch (command.platform) {\n    case Platform.ANDROID:\n      await configureAndroidSplashScreen(imagePath, command.mode);\n      break;\n    case Platform.IOS:\n      await configureIosSplashScreen(imagePath, command.mode);\n      break;\n    case Platform.ALL:\n    default:\n      await configureAndroidSplashScreen(imagePath, command.mode);\n      await configureIosSplashScreen(imagePath, command.mode);\n      break;\n  }\n}\n\nfunction getAvailableOptions(o: object) {\n  return Object.values(o)\n    .map(v => chalk.dim.cyan(v))\n    .join(' | ');\n}\n\n/**\n * Ensures following requirements are met:\n * - imagePath points to a valid .png file\n * - Mode.NATIVE is selected only with Platform.ANDROID\n */\nasync function ensureValidConfiguration(imagePathString: string, command: Command) {\n  // check for `native` mode being selected only for `android` platform\n  if (command.mode === Mode.NATIVE && command.platform !== Platform.ANDROID) {\n    console.log(\n      chalk.red(\n        `\\nInvalid ${chalk.magenta('platform')} ${chalk.yellow(\n          command.platform\n        )} selected for ${chalk.magenta('mode')} ${chalk.yellow(\n          command.mode\n        )}. See below for the valid options configuration.\\n`\n      )\n    );\n    program.help();\n  }\n\n  const imagePath = path.resolve(imagePathString);\n\n  // check if `imagePath` exists\n  if (!(await fs.pathExists(imagePath))) {\n    chalk.red(\n      `\\nNo such file ${chalk.yellow(imagePathString)}. Provide path to a valid .png file.\\n`\n    );\n    program.help();\n  }\n\n  // check if `imagePath` is a readable .png file\n  if (path.extname(imagePath) !== '.png') {\n    console.log(\n      chalk.red(\n        `\\nProvided ${chalk.yellow(\n          imagePathString\n        )} file is not a .png file. Provide path to a valid .png file.\\n`\n      )\n    );\n    program.help();\n  }\n}\n\nasync function runAsync() {\n  program\n    .arguments('<imagePath>')\n    .option(\n      '-m, --mode [mode]',\n      `Mode to be used for native splash screen image. Available values: ${getAvailableOptions(\n        Mode\n      )} (${chalk.yellow.dim(`only available for ${chalk.cyan.dim('android')} platform)`)}).`,\n      userInput => {\n        if (!Object.values(Mode).includes(userInput)) {\n          console.log(\n            chalk.red(\n              `\\nUnknown value ${chalk.yellow(userInput)} for option ${chalk.magenta(\n                'mode'\n              )}. See below for the available values for this option.\\n`\n            )\n          );\n          program.help();\n        }\n        return userInput;\n      },\n      Mode.CONTAIN\n    )\n    .option(\n      '-p, --platform [platform]',\n      `Selected platform to configure. Available values: ${getAvailableOptions(Platform)}.`,\n      userInput => {\n        if (!Object.values(Platform).includes(userInput)) {\n          console.log(\n            chalk.red(\n              `\\nUnknown value ${chalk.yellow(userInput)} for option ${chalk.magenta(\n                'platform'\n              )}. See below for the available values for this option.\\n`\n            )\n          );\n          program.help();\n        }\n        return userInput;\n      },\n      Platform.ALL\n    )\n    .allowUnknownOption(false)\n    .description(\n      'Idempotent operation that configures native splash screens using passed .png file that would be used in native splash screen.',\n      { imagePath: `(${chalk.dim.yellow('required')}) Path to a valid .png image.` }\n    )\n    .asyncAction(async (imagePath: string, command: Command) => {\n      await ensureValidConfiguration(imagePath, command);\n      await action(imagePath, command);\n    });\n\n  program.parse(process.argv);\n\n  // With no argument passed command should prompt user about wrong usage\n  if (program.args.length === 0) {\n    console.log(\n      chalk.red(\n        `\\nMissing argument ${chalk.yellow('imagePath')}. See below for the required arguments.\\n`\n      )\n    );\n    program.help();\n  }\n}\n\nasync function run() {\n  await runAsync().catch(e => {\n    console.error(chalk.red('Uncaught error:'), chalk.red(e.message));\n    process.exit(1);\n  });\n}\n\nrun();\n"]}