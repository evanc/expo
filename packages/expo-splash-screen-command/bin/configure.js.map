{"version":3,"file":"configure.js","sourceRoot":"","sources":["../src/configure.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport program from '@expo/commander';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport colorString from 'color-string';\n\nimport { Mode, Platform } from './constants';\nimport configureAndroidSplashScreen from './configureAndroidSplashScreen';\nimport configureIosSplashScreen from './configureIosSplashScreen';\n\n/**\n * There parameters have to be provided by the user or omitted if possible.\n */\ninterface Params {\n  backgroundColor: string;\n  imagePath: string | undefined;\n}\n\n/**\n * These are parameters that might be optionally provided by the user. There are default values for them.\n */\ninterface Options {\n  mode: Mode;\n  platform: Platform;\n}\n\nasync function action(configuration: Params & Options) {\n  const { platform, ...restParams } = configuration;\n  switch (platform) {\n    case Platform.ANDROID:\n      await configureAndroidSplashScreen(restParams);\n      break;\n    case Platform.IOS:\n      await configureIosSplashScreen(restParams);\n      break;\n    case Platform.ALL:\n    default:\n      await configureAndroidSplashScreen(restParams);\n      await configureIosSplashScreen(restParams);\n      break;\n  }\n}\n\nfunction getAvailableOptions(o: object) {\n  return Object.values(o)\n    .map(v => chalk.dim.cyan(v))\n    .join(' | ');\n}\n\n/**\n * Ensures following semantic requirements are met:\n * @param configuration.imagePath path that points to a valid .png file\n * @param configuration.mode Mode.NATIVE is selected only with Platform.ANDROID\n * @param configuration.backgroundColor is valid hex #RGB/#RGBA color\n */\nasync function validateConfiguration(\n  configuration: Options & Params\n): never | Promise<Options & Params> {\n  const { mode, imagePath: imagePathString, platform } = configuration;\n\n  // check for `native` mode being selected only for `android` platform\n  if (mode === Mode.NATIVE && platform !== Platform.ANDROID) {\n    console.log(\n      chalk.red(\n        `\\nInvalid ${chalk.magenta('platform')} ${chalk.yellow(\n          platform\n        )} selected for ${chalk.magenta('mode')} ${chalk.yellow(\n          mode\n        )}. See below for the valid options configuration.\\n`\n      )\n    );\n    program.help();\n  }\n\n  if (imagePathString) {\n    const imagePath = path.resolve(imagePathString);\n    // check if `imagePath` exists\n    if (!(await fs.pathExists(imagePath))) {\n      chalk.red(\n        `\\nNo such file ${chalk.yellow(imagePathString)}. Provide path to a valid .png file.\\n`\n      );\n      program.help();\n    }\n\n    // check if `imagePath` is a readable .png file\n    if (path.extname(imagePath) !== '.png') {\n      console.log(\n        chalk.red(\n          `\\nProvided ${chalk.yellow(\n            imagePathString\n          )} file is not a .png file. Provide path to a valid .png file.\\n`\n        )\n      );\n      program.help();\n    }\n  }\n\n  const backgroundColor = colorString.get(configuration.backgroundColor);\n  if (!backgroundColor) {\n    console.log(\n      chalk.red(\n        `\\nProvided invalid argument ${chalk.yellow(\n          configuration.backgroundColor\n        )} as backgroundColor. See below for available formats for this argument.\\n`\n      )\n    );\n    program.help();\n  }\n\n  return {\n    ...configuration,\n    backgroundColor: colorString.to.hex(backgroundColor.value),\n  };\n}\n\nasync function runAsync() {\n  program\n    .arguments('<backgroundColor> [imagePath]')\n    .option(\n      '-m, --mode [mode]',\n      `Mode to be used for native splash screen image. Available values: ${getAvailableOptions(\n        Mode\n      )} (${chalk.yellow.dim(`only available for ${chalk.cyan.dim('android')} platform)`)}).`,\n      userInput => {\n        if (!Object.values(Mode).includes(userInput)) {\n          console.log(\n            chalk.red(\n              `\\nUnknown value ${chalk.yellow(userInput)} for option ${chalk.magenta(\n                'mode'\n              )}. See below for the available values for this option.\\n`\n            )\n          );\n          program.help();\n        }\n        return userInput;\n      },\n      Mode.CONTAIN\n    )\n    .option(\n      '-p, --platform [platform]',\n      `Selected platform to configure. Available values: ${getAvailableOptions(Platform)}.`,\n      userInput => {\n        if (!Object.values(Platform).includes(userInput)) {\n          console.log(\n            chalk.red(\n              `\\nUnknown value ${chalk.yellow(userInput)} for option ${chalk.magenta(\n                'platform'\n              )}. See below for the available values for this option.\\n`\n            )\n          );\n          program.help();\n        }\n        return userInput;\n      },\n      Platform.ALL\n    )\n    .allowUnknownOption(false)\n    .description(\n      'Idempotent operation that configures native splash screens using passed .png file that would be used in native splash screen.',\n      {\n        backgroundColor: `(${chalk.dim.red(\n          'required'\n        )}) Valid css-formatted color (hex (#RRGGBB[AA]), rgb[a], hsl[a], named color (https://drafts.csswg.org/css-color/#named-colors)) that would be used as background color for native splash screen view.`,\n        imagePath: `(${chalk.dim.yellow('optional')}) Path to a valid .png image.`,\n      }\n    )\n    .asyncAction(\n      async (\n        backgroundColor: string,\n        imagePath: string | undefined,\n        { mode, platform }: program.Command & Options\n      ) => {\n        const configuration = { imagePath, backgroundColor, mode, platform };\n        const validatedConfiguration = await validateConfiguration(configuration);\n        await action(validatedConfiguration);\n      }\n    );\n\n  program.parse(process.argv);\n\n  // With no argument passed command should prompt user about wrong usage\n  if (program.args.length === 0) {\n    console.log(\n      chalk.red(\n        `\\nMissing argument ${chalk.yellow.dim(\n          'backgroundColor'\n        )}. See below for the required arguments.\\n`\n      )\n    );\n    program.help();\n  }\n}\n\nasync function run() {\n  await runAsync().catch(e => {\n    console.error(chalk.red('Uncaught error:'), chalk.red(e.message));\n    process.exit(1);\n  });\n}\n\nrun();\n"]}