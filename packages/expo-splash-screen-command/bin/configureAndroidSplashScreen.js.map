{"version":3,"file":"configureAndroidSplashScreen.js","sourceRoot":"","sources":["../src/configureAndroidSplashScreen.ts"],"names":[],"mappings":"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","sourcesContent":["// runtime polyfills\nimport 'core-js/es/string/match-all';\n\nimport path from 'path';\nimport fs from 'fs-extra';\nimport chalk from 'chalk';\nimport { projectConfig } from '@react-native-community/cli-platform-android';\n\nimport { Mode } from './constants';\n\nconst DRAWABLES_CONFIGS = {\n  drawable: {\n    multiplier: 1,\n  },\n  'drawable-mdpi': {\n    multiplier: 1,\n  },\n  'drawable-hdpi': {\n    multiplier: 1.5,\n  },\n  'drawable-xhdpi': {\n    multiplier: 2,\n  },\n  'drawable-xxhdpi': {\n    multiplier: 3,\n  },\n  'drawable-xxxhdpi': {\n    multiplier: 4,\n  },\n};\nconst FILENAMES = {\n  SPLASH_SCREEN_DRAWABLE: 'splashscreen_image.png',\n  SPLASH_SCREEN_XML: 'splashscreen.xml',\n  COLORS: 'colors_splashscreen.xml',\n  STYLES: 'styles_splashscreen.xml',\n  ANDROID_MANIFEST: 'AndroidManifest.xml',\n};\nconst TEMPLATES_COMMENTS_JAVA_KOTLIN = {\n  LINE: `// THIS LINE IS HANDLED BY 'expo-splash-screen' COMMAND AND IT'S DISCOURAGED TO MODIFY IT MANUALLY`,\n};\nconst TEMPLATES_COMMENTS_XML = {\n  LINE: `<!-- THIS LINE IS HANDLED BY 'expo-splash-screen' COMMAND AND IT'S DISCOURAGED TO MODIFY IT MANUALLY -->`,\n  TOP: `<!--\\n\\n    THIS FILE IS CREATED BY 'expo-splash-screen' COMMAND AND IT'S FRAGMENTS ARE HANDLED BY IT\\n\\n-->`,\n  TOP_NO_MANUAL_MODIFY: `<!--\\n\\n    THIS FILE IS CREATED BY 'expo-splash-screen' COMMAND AND IT'S DISCOURAGED TO MODIFY IT MANUALLY\\n\\n-->`,\n  ANDROID_MANIFEST: `<!-- THIS ACTIVITY'S 'android:theme' ATTRIBUTE IS HANDLED BY 'expo-splash-screen' COMMAND AND IT'S DISCOURAGED TO MODIFY IT MANUALLY -->`,\n};\n\n/**\n * Modifies file's content if either `replacePattern` or `insertPattern` matches.\n * If `replacePatten` matches `replaceContent` is used, otherwise if `insertPattern` matches `insertContent` is used.\n * @returns object describing which operation is successful.\n */\nasync function replaceOrInsertInFile(\n  filePath: string,\n  {\n    replaceContent,\n    replacePattern,\n    insertContent,\n    insertPattern,\n  }: {\n    replaceContent: string;\n    replacePattern: RegExp | string;\n    insertContent: string;\n    insertPattern: RegExp | string;\n  }\n): Promise<{ replaced: boolean; inserted: boolean }> {\n  const replaced = await replaceInFile(filePath, { replaceContent, replacePattern });\n  const inserted = !replaced && (await insertToFile(filePath, { insertContent, insertPattern }));\n  return { replaced, inserted };\n}\n\n/**\n * Tries to do following actions:\n * - when file doesn't exist or is empty - create it with given fileContent,\n * - when file does exist and contains provided replacePattern - replace replacePattern with replaceContent,\n * - when file does exist and doesn't contain provided replacePattern - insert given insertContent before first match of insertPattern,\n * - when insertPattern does not occur in the file - append insertContent to the end of the file.\n * @returns object describing which operation is successful.\n */\nasync function writeOrReplaceOrInsertInFile(\n  filePath: string,\n  {\n    fileContent,\n    replaceContent,\n    replacePattern,\n    insertContent,\n    insertPattern,\n  }: {\n    fileContent: string;\n    replaceContent: string;\n    replacePattern: RegExp | string;\n    insertContent: string;\n    insertPattern: RegExp | string;\n  }\n): Promise<{ created?: boolean; replaced?: boolean; inserted?: boolean }> {\n  if (!(await fs.pathExists(filePath)) || !/\\S/m.test(await fs.readFile(filePath, 'utf8'))) {\n    await writeToFile(filePath, fileContent);\n    return { created: true };\n  }\n\n  const { replaced, inserted } = await replaceOrInsertInFile(filePath, {\n    replaceContent,\n    replacePattern,\n    insertContent,\n    insertPattern,\n  });\n  if (replaced || inserted) {\n    return { replaced, inserted };\n  }\n\n  const originalFileContent = await fs.readFile(filePath, 'utf8');\n  await fs.writeFile(filePath, `${originalFileContent}${insertPattern}`);\n  return { inserted: true };\n}\n\n/**\n * Overrides or creates file (with possibly missing directories) with given content.\n */\nasync function writeToFile(filePath: string, fileContent: string) {\n  const fileDirnamePath = path.dirname(filePath);\n  if (!(await fs.pathExists(fileDirnamePath))) {\n    await fs.mkdirp(fileDirnamePath);\n  }\n  return await fs.writeFile(filePath, fileContent);\n}\n\n/**\n * @returns `true` if replacement is successful, `false` otherwise.\n */\nasync function replaceInFile(\n  filePath: string,\n  { replaceContent, replacePattern }: { replaceContent: string; replacePattern: string | RegExp }\n) {\n  const originalFileContent = await fs.readFile(filePath, 'utf8');\n  const replacePatternOccurrence = originalFileContent.search(replacePattern);\n  if (replacePatternOccurrence !== -1) {\n    await fs.writeFile(filePath, originalFileContent.replace(replacePattern, replaceContent));\n    return true;\n  }\n  return false;\n}\n\n/**\n * @returns `true` if insertion is successful, `false` otherwise.\n */\nasync function insertToFile(\n  filePath: string,\n  { insertContent, insertPattern }: { insertContent: string; insertPattern: RegExp | string }\n) {\n  const originalFileContent = await fs.readFile(filePath, 'utf8');\n  const insertPatternOccurrence = originalFileContent.search(insertPattern);\n  if (insertPatternOccurrence !== -1) {\n    await fs.writeFile(\n      filePath,\n      `${originalFileContent.slice(\n        0,\n        insertPatternOccurrence\n      )}${insertContent}${originalFileContent.slice(insertPatternOccurrence)}`\n    );\n    return true;\n  }\n  return false;\n}\n\n/**\n * Finds last occurrence of provided pattern and inserts content just before it.\n * @return `true` is insertion is successful, `false` otherwise.\n */\nasync function insertToFileBeforeLastOccurrence(\n  filePath: string,\n  { insertContent, insertPattern }: { insertContent: string; insertPattern: RegExp | string }\n) {\n  const originalFileContent = await fs.readFile(filePath, 'utf8');\n\n  const results = [...originalFileContent.matchAll(new RegExp(insertPattern, 'gm'))];\n  const patternLastOccurrence = results[results.length - 1];\n  if (!patternLastOccurrence) {\n    return false;\n  }\n  await fs.writeFile(\n    filePath,\n    `${originalFileContent.slice(\n      0,\n      patternLastOccurrence.index\n    )}${insertContent}${originalFileContent.slice(patternLastOccurrence.index)}`\n  );\n  return true;\n}\n\n/**\n * Deletes all previous splash_screen_images and copies new one to desired drawable directory.\n * If path isn;t provided then no new image is placed in drawable directories.\n * @see https://developer.android.com/training/multiscreen/screendensities\n */\nasync function configureSplashScreenDrawables(\n  androidMainResPath: string,\n  splashScreenImagePath?: string\n) {\n  await Promise.all(\n    Object.keys(DRAWABLES_CONFIGS)\n      .map(drawableDirectoryName =>\n        path.resolve(androidMainResPath, drawableDirectoryName, FILENAMES.SPLASH_SCREEN_DRAWABLE)\n      )\n      .map(async drawablePath => {\n        if (await fs.pathExists(drawablePath)) {\n          await fs.remove(drawablePath);\n        }\n      })\n  );\n\n  if (splashScreenImagePath) {\n    if (!(await fs.pathExists(path.resolve(androidMainResPath, 'drawable')))) {\n      await fs.mkdir(path.resolve(androidMainResPath, 'drawable'));\n    }\n    await fs.copyFile(\n      splashScreenImagePath,\n      path.resolve(androidMainResPath, 'drawable', FILENAMES.SPLASH_SCREEN_DRAWABLE)\n    );\n  }\n}\n\nasync function configureColorsXML(androidMainResPath: string, splashScreenBackgroundColor: string) {\n  await writeOrReplaceOrInsertInFile(path.resolve(androidMainResPath, 'values', FILENAMES.COLORS), {\n    fileContent: `${TEMPLATES_COMMENTS_XML.TOP}\n<resources>\n  <color name=\"splashscreen_background\">${splashScreenBackgroundColor}</color> ${TEMPLATES_COMMENTS_XML.LINE}\n</resources>\n`,\n    replaceContent: `  <color name=\"splashscreen_background\">${splashScreenBackgroundColor}</color> ${TEMPLATES_COMMENTS_XML.LINE}\\n`,\n    replacePattern: /(?<=(?<openingTagLine>^.*?<resources>.*?$\\n)(?<beforeLines>(?<beforeLine>^.*$\\n)*?))(?<colorLine>^.*?(?<color><color name=\"splashscreen_background\">.*<\\/color>).*$\\n)(?=(?<linesAfter>(?<afterLine>^.*$\\n)*?)(?<closingTagLine>^.*?<\\/resources>.*?$\\n))/m,\n\n    insertContent: `  <color name=\"splashscreen_background\">${splashScreenBackgroundColor}</color> ${TEMPLATES_COMMENTS_XML.LINE}\\n`,\n    insertPattern: /^(.*?)<\\/resources>(.*?)$/m,\n  });\n}\n\nasync function configureDrawableXML(androidMainResPath: string, mode: Mode) {\n  const nativeSplashScreen: string =\n    mode !== Mode.NATIVE\n      ? ''\n      : `\n\n  <item>\n    <bitmap\n      android:gravity=\"center\"\n      android:src=\"@drawable/splashscreen_image\"\n    />\n  </item>`;\n\n  await writeToFile(\n    path.resolve(androidMainResPath, 'drawable', FILENAMES.SPLASH_SCREEN_XML),\n    `${TEMPLATES_COMMENTS_XML.TOP_NO_MANUAL_MODIFY}\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n  <item android:drawable=\"@color/splashscreen_background\"/>${nativeSplashScreen}\n</layer-list>\n`\n  );\n}\n\nasync function configureStylesXML(androidMainResPath: string) {\n  await writeOrReplaceOrInsertInFile(path.resolve(androidMainResPath, 'values', FILENAMES.STYLES), {\n    fileContent: `${TEMPLATES_COMMENTS_XML.TOP}\n<resources>\n  <style name=\"Theme.App.SplashScreen\" parent=\"Theme.AppCompat.Light.NoActionBar\"> ${TEMPLATES_COMMENTS_XML.LINE}\n    <item name=\"android:windowBackground\">@drawable/splashscreen</item>  ${TEMPLATES_COMMENTS_XML.LINE}\n    <item name=\"android:windowDrawsSystemBarBackgrounds\">true</item> <!-- Tells the system that the app would take care of drawing background for StatusBar -->\n    <item name=\"android:statusBarColor\">@android:color/transparent</item> <!-- Make StatusBar transparent by default -->\n  </style>\n</resources>\n`,\n    replaceContent: `    <item name=\"android:windowBackground\">@drawable/splashscreen</item>  ${TEMPLATES_COMMENTS_XML.LINE}\\n`,\n    replacePattern: /(?<=(?<styleNameLine>^.*?(?<styleName><style name=\"Theme\\.App\\.SplashScreen\" parent=\".*?\">).*?$\\n)(?<linesBeforeWindowBackgroundLine>(?<singleBeforeLine>^.*$\\n)*?))(?<windowBackgroundLine>^.*?(?<windowBackground><item name=\"android:windowBackground\">.*<\\/item>).*$\\n)(?=(?<linesAfterWindowBackgroundLine>(?<singleAfterLine>^.*$\\n)*?)(?<closingTagLine>^.*?<\\/style>.*?$\\n))/m,\n\n    insertContent: `  <style name=\"Theme.App.SplashScreen\" parent=\"Theme.AppCompat.Light.NoActionBar\">  ${TEMPLATES_COMMENTS_XML.LINE}\n    <item name=\"android:windowBackground\">@drawable/splashscreen</item>  ${TEMPLATES_COMMENTS_XML.LINE}\n  </style>\n`,\n    insertPattern: /^(.*?)<\\/resources>(.*?)$/m,\n  });\n}\n\nasync function configureAndroidManifestXML(androidMainPath: string) {\n  const androidManifestPath = path.resolve(androidMainPath, 'AndroidManifest.xml');\n\n  const r1 = await replaceOrInsertInFile(androidManifestPath, {\n    replaceContent: `android:theme=\"@style/Theme.App.SplashScreen\"`,\n    replacePattern: /(?<nameBeforeTheme>(?<=(?<application1>^.*?<application(.*|\\n)*?)(?<activity1>^.*?<activity(.|\\n)*?android:name=\"\\.MainActivity\"(.|\\n)*?))(?<androidTheme1>android:theme=\".*?\"\\s*?))|((?<=(?<application2>^.*?<application(.|\\n)*?)(?<activity2>^.*?<activity(.|\\n)*?))(?<androidTheme2>android:theme=\".*?\"\\s*?)(?=((.|\\n)*?android:name=\"\\.MainActivity\"(.|\\n)*?)))/m,\n\n    insertContent: `\\n      android:theme=\"@style/Theme.App.SplashScreen\"`,\n    insertPattern: /(?<=(?<application>^.*?<application(.*|\\n)*?)(?<activity>^.*?<activity))(?<activityAttributes>(.|\\n)*?android:name=\"\\.MainActivity\"(.|\\n)*?>)/m,\n  });\n\n  const r2 = await replaceOrInsertInFile(androidManifestPath, {\n    replaceContent: `\\n\\n    ${TEMPLATES_COMMENTS_XML.ANDROID_MANIFEST}\\n`,\n    replacePattern: RegExp(\n      `(?<=(?<application>^.*?<application(.|\\n)*?))([\\n\\t ])*(?<comment>${TEMPLATES_COMMENTS_XML.ANDROID_MANIFEST.replace(\n        /[-/\\\\^$*+?.()|[\\]{}]/g,\n        '\\\\$&'\n      )})([\\n\\t ])*(?=(?<activity>(^.*?<activity)(.|\\n)*?android:name=\"\\.MainActivity\"(.|\\n)*?>))`,\n      'm'\n    ),\n\n    insertContent: `\\n    ${TEMPLATES_COMMENTS_XML.ANDROID_MANIFEST}\\n`,\n    insertPattern: /(?<=(?<application>^.*?<application(.|\\n)*?))(?<activity>(^.*?<activity)(.|\\n)*?android:name=\"\\.MainActivity\"(.|\\n)*?>)/m,\n  });\n\n  if (!r1.inserted && !r1.replaced && !r2.inserted && r2.replaced) {\n    console.log(\n      chalk.yellow(\n        `${chalk.magenta(\n          'AndroidManifest.xml'\n        )} does not contain <activity /> entry for ${chalk.magenta(\n          'MainActivity'\n        )}. SplashScreen style will not be applied.`\n      )\n    );\n  }\n}\n\n/**\n * Configures or creates splash screen's:\n * - background color\n * - xml drawable file\n * - style with theme including 'android:windowBackground'\n * - theme for activity in AndroidManifest.xml\n */\nasync function configureSplashScreenXMLs(\n  androidMainPath: string,\n  mode: Mode,\n  splashScreenBackgroundColor: string\n) {\n  const androidMainResPath = path.resolve(androidMainPath, 'res');\n  await Promise.all([\n    configureColorsXML(androidMainResPath, splashScreenBackgroundColor),\n    configureDrawableXML(androidMainResPath, mode),\n    configureStylesXML(androidMainResPath),\n    configureAndroidManifestXML(androidMainPath),\n  ]);\n}\n\n/**\n * Injects specific code to MainApplication that would trigger SplashScreen mounting process.\n */\nasync function configureShowingSplashScreen(projectRootPath: string, mode: Mode) {\n  // eslint-disable-next-line\n  const mainApplicationPath = projectConfig(projectRootPath)?.mainFilePath;\n\n  if (!mainApplicationPath) {\n    console.log(chalk.red('TODO!'));\n    return;\n  }\n\n  const mainActivityPathJava = path.resolve(mainApplicationPath, '../MainActivity.java');\n  const mainActivityPathKotlin = path.resolve(mainApplicationPath, '../MainActivity.kt');\n\n  const isJava = await fs.pathExists(mainActivityPathJava);\n  const isKotlin = !isJava && (await fs.pathExists(mainActivityPathKotlin));\n\n  if (isJava) {\n    // handle imports\n    await replaceOrInsertInFile(mainActivityPathJava, {\n      replacePattern: /^import main\\.kotlin\\.expo\\.modules\\.splashscreen\\.SplashScreen;.*?\\nimport main\\.kotlin\\.expo\\.modules\\.splashscreen\\.SplashScreenMode;.*?$/m,\n      replaceContent: `import main.kotlin.expo.modules.splashscreen.SplashScreen;\\nimport main.kotlin.expo.modules.splashscreen.SplashScreenMode;`,\n      insertPattern: /(?=public class .* extends .* {.*$)/m,\n      insertContent: `import main.kotlin.expo.modules.splashscreen.SplashScreen;\\nimport main.kotlin.expo.modules.splashscreen.SplashScreenMode;\\n\\n`,\n    });\n\n    // handle onCreate\n    const r = await replaceOrInsertInFile(mainActivityPathJava, {\n      replacePattern: /(?<=super\\.onCreate(.|\\n)*?)SplashScreen\\.show\\(this, SplashScreenMode\\..*\\);.*$/m, // super.onCreate has to be called first\n      replaceContent: `SplashScreen.show(this, SplashScreenMode.${mode.toUpperCase()}); ${\n        TEMPLATES_COMMENTS_JAVA_KOTLIN.LINE\n      }`,\n      insertPattern: /(?<=^.*super\\.onCreate.*$)/m, // insert just below super.onCreate\n      insertContent: `\\n    // SplashScreen.show(...) has to called after super.onCreate(...)\\n    SplashScreen.show(this, SplashScreenMode.${mode.toUpperCase()}); ${\n        TEMPLATES_COMMENTS_JAVA_KOTLIN.LINE\n      }`,\n    });\n\n    let onCreateInserted = false;\n    if (!r.replaced && !r.inserted) {\n      // handle if sth went wrong\n      // no previously defined onCreate -> insert basic one\n      onCreateInserted = await insertToFile(mainActivityPathJava, {\n        insertPattern: /(?<=public class .* extends .* {.*$)/m,\n        insertContent: `\\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    // SplashScreen.show(...) has to called after super.onCreate(...)\n    SplashScreen.show(this, SplashScreenMode.${mode.toUpperCase()}); ${\n          TEMPLATES_COMMENTS_JAVA_KOTLIN.LINE\n        }\n  }\\n`,\n      });\n      // with additional bundle import at the top\n      await replaceOrInsertInFile(mainActivityPathJava, {\n        replacePattern: /import android\\.os\\.Bundle;/m,\n        replaceContent: 'import android.os.Bundle;',\n        insertPattern: /(?<=(^.*?package .*?$))/m,\n        insertContent: `\\n\\nimport android.os.Bundle;`,\n      });\n    }\n\n    // check if SplashScreen.show() is added for the first time\n    // if so - proceed with inserting handling transparent & translucent StatusBar\n    if (r.inserted || onCreateInserted) {\n      // insert import\n      await insertToFile(mainActivityPathJava, {\n        insertPattern: /(?<=(^.*?import\\s*android\\.os\\.Bundle;.*?$))/m,\n        insertContent: '\\nimport android.view.WindowInsets;',\n      });\n      // insert method call - just below SplashScreen.show(...)\n      await insertToFile(mainActivityPathJava, {\n        insertPattern: /(?<=SplashScreen\\.show\\(this, SplashScreenMode\\..*\\);.*$)/m,\n        insertContent: `\\n    // StatusBar transparency & translucency that would work with RN has to be pragmatically configured.\\n    this.allowDrawingBeneathStatusBar();`,\n      });\n      // insert method body as the last method in class\n      await insertToFileBeforeLastOccurrence(mainActivityPathJava, {\n        insertPattern: /^\\s*}\\s*$/gm,\n        insertContent: `\n  private void allowDrawingBeneathStatusBar() {\n    // Hook into the window insets calculations and consume all the top insets so no padding will be added under the status bar.\n    // This approach goes in pair with ReactNative's StatusBar module's approach.\n    getWindow().getDecorView().setOnApplyWindowInsetsListener(\n        (v, insets) -> {\n          WindowInsets defaultInsets = v.onApplyWindowInsets(insets);\n          return defaultInsets.replaceSystemWindowInsets(\n              defaultInsets.getSystemWindowInsetLeft(),\n              0,\n              defaultInsets.getSystemWindowInsetRight(),\n              defaultInsets.getSystemWindowInsetBottom());\n        });\n  }\\n`,\n      });\n    }\n\n    return;\n  }\n\n  if (isKotlin) {\n    // handle imports\n    await replaceOrInsertInFile(mainActivityPathKotlin, {\n      replacePattern: /^import main\\.kotlin\\.expo\\.modules\\.splashscreen\\.SplashScreen.*?\\nimport main\\.kotlin\\.expo\\.modules\\.splashscreen\\.SplashScreenMode.*?$/m,\n      replaceContent: `import main.kotlin.expo.modules.splashscreen.SplashScreen\\nimport main.kotlin.expo.modules.splashscreen.SplashScreenMode`,\n      insertPattern: /(?=class .* : .* {.*$)/m,\n      insertContent: `import main.kotlin.expo.modules.splashscreen.SplashScreen\\nimport main.kotlin.expo.modules.splashscreen.SplashScreenMode\\n\\n`,\n    });\n\n    // handle onCreate\n    const r = await replaceOrInsertInFile(mainActivityPathKotlin, {\n      replacePattern: /(?<=super\\.onCreate(.|\\n)*?)SplashScreen\\.show\\(this, SplashScreenMode\\..*\\).*$/m, // super.onCreate has to be called first\n      replaceContent: `SplashScreen.show(this, SplashScreenMode.${mode.toUpperCase()}) ${\n        TEMPLATES_COMMENTS_JAVA_KOTLIN.LINE\n      }`,\n      insertPattern: /(?<=^.*super\\.onCreate.*$)/m, // insert just below super.onCreate\n      insertContent: `\\n    // SplashScreen.show(...) has to called after super.onCreate(...)\\n    SplashScreen.show(this, SplashScreenMode.${mode.toUpperCase()}) ${\n        TEMPLATES_COMMENTS_JAVA_KOTLIN.LINE\n      }`,\n    });\n\n    let onCreateInserted = false;\n    if (!r.replaced && !r.inserted) {\n      // handle if sth went wrong\n      // no previously defined onCreate -> insert basic one\n      onCreateInserted = await insertToFile(mainActivityPathKotlin, {\n        insertPattern: /(?<=class .* : .* {.*$)/m,\n        insertContent: `\\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    // SplashScreen.show(...) has to called after super.onCreate(...)\n    SplashScreen.show(this, SplashScreenMode.${mode.toUpperCase()}) ${\n          TEMPLATES_COMMENTS_JAVA_KOTLIN.LINE\n        }\n  }\\n`,\n      });\n      // with additional bundle import at the top\n      await replaceOrInsertInFile(mainActivityPathKotlin, {\n        replacePattern: /import android\\.os\\.Bundle/m,\n        replaceContent: 'import android.os.Bundle',\n        insertPattern: /(?<=(^.*?package .*?$))/m,\n        insertContent: `\\n\\nimport android.os.Bundle`,\n      });\n    }\n\n    // check if SplashScreen.show() is added for the first time\n    // if so - proceed with inserting handling transparent & translucent StatusBar\n    if (r.inserted || onCreateInserted) {\n      // insert method call - just below SplashScreen.show(...)\n      await insertToFile(mainActivityPathKotlin, {\n        insertPattern: /(?<=SplashScreen\\.show\\(this, SplashScreenMode\\..*\\).*$)/m,\n        insertContent: `\\n    // StatusBar transparency & translucency that would work with RN has to be pragmatically configured.\\n    this.allowDrawingBeneathStatusBar()`,\n      });\n      // insert method body as the last method in class\n      await insertToFileBeforeLastOccurrence(mainActivityPathKotlin, {\n        insertPattern: /^\\s*}\\s*$/gm,\n        insertContent: `\n  private fun allowDrawingBeneathStatusBar() {\n    // Hook into the window insets calculations and consume all the top insets so no padding will be added under the status bar.\n    // This approach goes in pair with ReactNative's StatusBar module's approach.\n    window.decorView.setOnApplyWindowInsetsListener { v, insets ->\n      v.onApplyWindowInsets(insets).let {\n        it.replaceSystemWindowInsets(\n          it.systemWindowInsetLeft, \n          0,\n          it.systemWindowInsetRight,\n          it.systemWindowInsetBottom\n        )\n      }\n    }\n  }\\n`,\n      });\n    }\n\n    return;\n  }\n\n  console.log('TODO: ERROR');\n}\n\nexport default async function configureAndroidSplashScreen({\n  imagePath,\n  mode,\n  backgroundColor,\n}: {\n  imagePath?: string;\n  mode: Mode;\n  backgroundColor: string;\n}) {\n  const projectRootPath = path.resolve();\n  const androidMainPath = path.resolve(projectRootPath, 'android/app/src/main');\n\n  return Promise.all([\n    await configureSplashScreenDrawables(path.resolve(androidMainPath, 'res'), imagePath),\n    await configureSplashScreenXMLs(androidMainPath, mode, backgroundColor),\n    await configureShowingSplashScreen(projectRootPath, mode),\n  ]).then(() => {});\n}\n"]}